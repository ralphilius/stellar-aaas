{"version":3,"file":"router.js","sourceRoot":"","sources":["../../src/payment/router.ts"],"names":[],"mappings":";;;;;AAEA,MAAM,IAAI,GAAG,OAAO,CAAC,qBAAqB,CAAC,EAAE,CAAC;AAC9C,MAAM,MAAM,GAAG,OAAO,CAAC,SAAS,CAAC,CAAC,MAAM,EAAE,CAAC;AAC3C,+DAAgD;AAChD,uFAA6D;AAE7D,KAAK,UAAU,WAAW,CAAC,GAAoB,EAAE,GAAa;;IAC5D,MAAM,EAAE,WAAW,EAAE,MAAM,EAAE,GAAG,GAAG,CAAC,IAAI,CAAC;IAEzC,IAAG,CAAC,WAAW,IAAI,CAAC,MAAM;QAAE,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,CAAC;IAEzD,IAAI;QACF,MAAM,OAAO,GAAG,MAAM,iBAAgB,CAAC,UAAU,EAAE,CAAC;QACpD,MAAM,MAAM,GAAG,OAAO,CAAC,WAAW,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QAChD,MAAM,MAAM,GAAG,MAAM,OAAO,CAAC,WAAW,CAAC,MAAM,CAAC,SAAS,EAAE,EAAE,WAAW,EAAE,MAAM,CAAC,CAAC;QAElF,IAAG,MAAM,CAAC,QAAQ,EAAC;YACjB,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;SACnC;aAAM;YACL,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,CAAC;SACvB;KACF;IAAC,OAAO,CAAC,EAAE;QACV,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;QACjB,IAAG,CAAC,CAAC,OAAO,EAAC;YACX,QAAO,CAAC,CAAC,OAAO,EAAC;gBACf,KAAK,kBAAkB;oBACrB,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,CAAC;gBAC/B,KAAK,sBAAsB;oBACzB,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,CAAC;gBAC/B,KAAK,eAAe,CAAC;gBACrB,KAAK,uBAAuB;oBAC1B,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,CAAC;gBAC/B,YAAY;gBACZ,kCAAkC;aACnC;YACD,MAAM,YAAY,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,QAAQ,IAAI,EAAE,CAAC,CAAC,IAAI,IAAI,EAAE,CAAC,CAAC,MAAM,IAAI,EAAE,CAAC,CAAC,YAAY,CAAC;YACzF,UAAG,YAAY,CAAC,UAAU,0CAAE,QAAQ,CAAC,mBAAmB;gBAAG,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,CAAC;YAExF,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,CAAC;SACvB;aAAM;YACL,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,CAAC;SACvB;KACF;AAEH,CAAC;AAGD,MAAM,CAAC,IAAI,CAAC,MAAM,EAAE,0BAAc,EAAE,IAAI,EAAE,WAAW,CAAC,CAAC;AAGvD,MAAM,CAAC,OAAO,GAAG,MAAM,CAAC","sourcesContent":["import { Response } from 'express';\nimport { RequestWithUser } from '../types';\nconst auth = require('../middlewares/auth')();\nconst router = require('express').Router();\nimport StellarCustodial from '../utils/stellar';\nimport validateHeader from '../middlewares/header-validator';\n\nasync function makePayment(req: RequestWithUser, res: Response){\n  const { destination, amount } = req.body;\n  \n  if(!destination || !amount) return res.status(400).end();\n\n  try {\n    const stellar = await StellarCustodial.initialize();\n    const source = stellar.muxedFromId(req.user.id);\n    const result = await stellar.makePayment(source.accountId(), destination, amount);\n\n    if(result.toLedger){ \n      res.status(204).json(result.data);\n    } else {\n      res.status(204).end();\n    }\n  } catch (e) {\n    console.error(e);\n    if(e.message){\n      switch(e.message){\n        case 'source-not-found':\n          return res.status(404).end();\n        case 'insufficient-balance':\n          return res.status(409).end();\n        case 'NotFoundError':\n        case 'destination-not-found':\n          return res.status(404).end();\n        // default: \n        //   return res.status(500).end();\n      }\n      const result_codes = ((((e || {}).response || {}).data || {}).extras || {}).result_codes;\n      if(result_codes.operations?.includes(\"op_no_destination\")) return res.status(404).end();\n\n      res.status(500).end();\n    } else {\n      res.status(500).end();\n    }\n  }\n  \n}\n\n\nrouter.post('/pay', validateHeader, auth, makePayment);\n\n\nmodule.exports = router;"]}