{"version":3,"file":"router.js","sourceRoot":"","sources":["../../src/account/router.ts"],"names":[],"mappings":"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","sourcesContent":["import { Request, Response, NextFunction } from 'express';\nimport { User, RequestWithUser } from '../types';\nconst router = require('express').Router();\nimport { getUser, createUser, getUserById } from '../utils/database';\nimport { securePassword, validPassword, validUsername } from '../utils/account';\n\nimport { nanoid } from 'nanoid';\nimport validateHeader from '../middlewares/header-validator';\nconst auth = require('../middlewares/auth')();\nimport StellarCustodial from '../utils/stellar';\n\nfunction validateRequest(req: Request, res: Response, next: NextFunction) {\n  const { username, password } = req.body;\n\n  if (!username || !password) return res.status(400).end();\n\n  next();\n}\n\nfunction createCustomer(req: Request, res: Response) {\n  const { username, password } = req.body;\n  if (!validUsername(username)) return res.status(400).json({\n    message: \"username must be between 4 to 12 alphanumeric characters\"\n  });\n\n  getUser(username)\n    .then((user: User) => {\n      if (user) throw new Error('account-exists');\n\n      const { salt, hash } = securePassword(password);\n      const apiKey = nanoid(32);\n\n      return createUser(username, { salt, hash, apiKey, balance: '100' }); // Give each user 100 XLM to try out service\n    })\n    .then(() => {\n      res.status(204).end();\n    })\n    .catch((e: Error) => {\n      if (e.message == 'account-exists') return res.status(409).end();\n\n      res.status(500).json(e);\n    });\n\n}\n\nfunction login(req: Request, res: Response) {\n  const { username, password } = req.body;\n\n  getUser(username)\n    .then((user: User) => {\n      if (!user) return res.status(404).end();\n\n      if (!validPassword(password, user.hash, user.salt)) {\n        res.status(401).end();\n      } else {\n        res.json({ apiKey: user.apiKey })\n      }\n    })\n}\n\nasync function getAccountInfo(req: RequestWithUser, res: Response) {\n  const { id } = req.user;\n  const stellar = await StellarCustodial.initialize();\n  const muxedAccount = stellar.muxedFromId(id);\n  const user = await getUserById(id);\n  return res.json({\n    address: muxedAccount.accountId(),\n    balance: user['balance']\n  })\n}\n\nrouter.post('/register', validateHeader, validateRequest, createCustomer);\nrouter.post('/login', validateHeader, validateRequest, login);\nrouter.get('/info', auth, getAccountInfo);\n\n\nmodule.exports = router;"]}