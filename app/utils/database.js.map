{"version":3,"file":"database.js","sourceRoot":"","sources":["../../src/utils/database.ts"],"names":[],"mappings":";;;AAAA,MAAM,QAAQ,GAAG,OAAO,CAAC,kBAAkB,CAAC,CAAC;AAE7C,uCAA0C;AAC1C,MAAM,EAAE,GAAG,IAAI,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,SAAS,IAAI,IAAI,CAAC,CAAC;AAEhD,KAAK,UAAU,UAAU,CAAC,QAAgB,EAAE,IAAU;IAC3D,MAAM,MAAM,GAAG,uBAAa,CAAC,QAAQ,CAAC,CAAC;IACvC,QAAQ,CAAC,IAAI,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC,CAAC,iHAAiH;IAClJ,OAAO,EAAE,CAAC,GAAG,CAAC,QAAQ,MAAM,EAAE,EAAE,IAAI,CAAC,CAAC;AACxC,CAAC;AAJD,gCAIC;AAEM,KAAK,UAAU,UAAU,CAAC,MAAc,EAAE,IAAU;IACzD,OAAO,EAAE,CAAC,GAAG,CAAC,QAAQ,MAAM,EAAE,EAAE,IAAI,CAAC,CAAA;AACvC,CAAC;AAFD,gCAEC;AAEM,KAAK,UAAU,OAAO,CAAC,QAAgB;IAC5C,MAAM,MAAM,GAAG,uBAAa,CAAC,QAAQ,CAAC,CAAC;IACvC,OAAO,EAAE,CAAC,GAAG,CAAC,QAAQ,MAAM,EAAE,CAAC,CAAC;AAClC,CAAC;AAHD,0BAGC;AAEM,KAAK,UAAU,WAAW,CAAC,MAAc;IAC9C,OAAO,EAAE,CAAC,GAAG,CAAC,QAAQ,MAAM,EAAE,CAAC,CAAC;AAClC,CAAC;AAFD,kCAEC;AAED,SAAgB,QAAQ,CAAC,MAAc,EAAE,QAAgB;IACvD,MAAM,MAAM,GAAG,uBAAa,CAAC,QAAQ,CAAC,CAAC;IACvC,OAAO,EAAE,CAAC,GAAG,CAAC,SAAS,MAAM,EAAE,EAAE,MAAM,CAAC,CAAC;AAC3C,CAAC;AAHD,4BAGC;AAED,SAAgB,QAAQ,CAAC,MAAc;IACrC,OAAO,EAAE,CAAC,GAAG,CAAC,SAAS,MAAM,EAAE,CAAC,CAAC;AACnC,CAAC;AAFD,4BAEC","sourcesContent":["const Database = require(\"@replit/database\");\nimport { User } from '../types';\nimport { usernameForId } from './account';\nconst db = new Database(process.env.CUSTOM_DB || null);\n\nexport async function createUser(username: string, data: User) {\n  const userId = usernameForId(username);\n  setToken(data.apiKey, username); // Replit Database is a key-value database without query capability, so this will help to validate API key later.\n  return db.set(`user-${userId}`, data);\n}\n\nexport async function updateUser(userId: string, data: User) {\n  return db.set(`user-${userId}`, data)\n}\n\nexport async function getUser(username: string) {\n  const userId = usernameForId(username);\n  return db.get(`user-${userId}`);\n}\n\nexport async function getUserById(userId: string): Promise<User>{\n  return db.get(`user-${userId}`);\n}\n\nexport function setToken(apiKey: string, username: string){\n  const userId = usernameForId(username);\n  return db.set(`token-${apiKey}`, userId);\n}\n\nexport function getToken(apiKey: string){\n  return db.get(`token-${apiKey}`);\n}"]}