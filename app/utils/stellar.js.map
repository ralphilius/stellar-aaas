{"version":3,"file":"stellar.js","sourceRoot":"","sources":["../../src/utils/stellar.ts"],"names":[],"mappings":"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","sourcesContent":["const StellarSdk = require(\"stellar-sdk\");\nimport {\n  Account, Asset,\n  MuxedAccount,\n  TransactionBuilder\n} from 'stellar-sdk'\nimport { getUserById, updateUser } from './database';\nimport { usernameForId } from './account';\nimport { User } from '../types'\n\nconst server = new StellarSdk.Server(\"https://horizon-testnet.stellar.org\");\nconst custodialKey = StellarSdk.Keypair.fromSecret(\"SBEQ44JMAS4UW3GOXWNSDD3QYKM56IYK247CWAXFMR4PRSGUVRFSMUOU\");\n\nasync function loadAccount(account: string | Account | MuxedAccount): Promise<Account> {\n  let publicKey = null;\n  if (typeof account == \"string\") {\n    publicKey = account;\n  } else {\n    publicKey = account.accountId();\n    if (account.accountId().startsWith(\"M\")) {\n      publicKey = (account as MuxedAccount).baseAccount().accountId();\n    }\n  }\n\n  return server.loadAccount(publicKey)\n}\n\nfunction isMuxedAccount(acc: string | Account | MuxedAccount) {\n  return typeof acc == 'string' ? acc.startsWith('M') : acc.accountId().startsWith('M');\n}\n\nfunction isAnyAccountMuxed(...args: Array<string | Account | MuxedAccount>): boolean {\n  return Array.from(args)\n    .map((a) => isMuxedAccount(a))\n    .reduce((t, v) => t || v, false);\n}\n\nfunction isWithinMuxedBase(source: MuxedAccount, dest: MuxedAccount) {\n  return source.baseAccount().accountId() == dest.baseAccount().accountId();\n}\n\nclass StellarCustodial {\n  CUSTODIAL_ACCOUNT: Account;\n  static _instance: StellarCustodial;\n\n  private constructor(private account: Account) {\n    this.CUSTODIAL_ACCOUNT = account;\n  }\n\n  public usernameForMuxed(username: string): MuxedAccount {\n    const userId = usernameForId(username);\n    return new MuxedAccount(this.CUSTODIAL_ACCOUNT, userId);\n  }\n\n  muxedFromAddress(address: string): MuxedAccount {\n    return MuxedAccount.fromAddress(address, this.CUSTODIAL_ACCOUNT.sequenceNumber());\n  }\n\n  public muxedFromId(userId: string): MuxedAccount {\n    return new MuxedAccount(this.CUSTODIAL_ACCOUNT, userId);\n  }\n\n  public async getBaseMuxedBalance(acc: MuxedAccount): Promise<string | null> {\n    try {\n      const user: User = await getUserById(acc.id());\n      return user.balance;\n    } catch (e) {\n      console.error(e);\n      return null;\n    }\n\n  }\n\n  public async makePayment(source: string, dest: string, amount: string): Promise<any> {\n    const sourceMuxed = this.muxedFromAddress(source);\n    const sourceUser = await getUserById(sourceMuxed.id());\n\n    if (!sourceUser) throw new Error('source-not-found');\n\n    if (sourceUser.balance < amount) throw new Error(\"insufficient-balance\")\n\n    if (isMuxedAccount(source) && isMuxedAccount(dest)) {\n      const destMuxed = this.muxedFromAddress(dest);\n\n      if (isWithinMuxedBase(sourceMuxed, destMuxed)) {\n        const destUser = await getUserById(destMuxed.id());\n\n        if (!destUser) throw new Error('destination-not-found');\n\n        await updateUser(sourceMuxed.id(), {\n          ...sourceUser,\n          balance: (parseFloat(sourceUser.balance) - parseFloat(amount)).toString()\n        })\n        await updateUser(destMuxed.id(), {\n          ...destUser,\n          balance: (parseFloat(destUser.balance) + parseFloat(amount)).toString()\n        });\n        return {\n          toLedger: false\n        }\n      }\n    }\n\n    // muxed to outside should reduce balance & revert on failure\n    return loadAccount(sourceMuxed)\n      .then((accountForPayment: Account) => {\n        let payment = StellarSdk.Operation.payment({\n          source: sourceMuxed.accountId(),\n          destination: dest,\n          asset: Asset.native(),\n          amount: amount,\n          withMuxing: isAnyAccountMuxed(sourceMuxed, dest),\n        });\n\n        let tx = new TransactionBuilder(accountForPayment, {\n          networkPassphrase: StellarSdk.Networks.TESTNET,\n          withMuxing: isAnyAccountMuxed(sourceMuxed, dest),\n          fee: '100',\n        })\n          .addOperation(payment)\n          .setTimeout(30)\n          .build();\n\n        tx.sign(custodialKey);\n        return server.submitTransaction(tx);\n      }).then(async (tx) => {\n        await updateUser(sourceMuxed.id(), {\n          ...sourceUser,\n          balance: (parseFloat(sourceUser.balance) - parseFloat(amount)).toString()\n        })\n        return {\n          toLedger: true,\n          data: tx\n        }\n      });\n  }\n\n  \n\n  public static async initialize(): Promise<StellarCustodial> {\n    const account = await server.loadAccount(custodialKey.publicKey());\n\n    if (!StellarCustodial._instance) StellarCustodial._instance = new StellarCustodial(account);\n\n    return StellarCustodial._instance;\n  }\n\n}\n\nexport default StellarCustodial;"]}