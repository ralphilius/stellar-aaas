{"version":3,"file":"account.js","sourceRoot":"","sources":["../../src/utils/account.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA,+CAAiC;AACjC,yCAA8C;AAC9C,MAAM,EAAE,cAAc,EAAE,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;AAC7C,MAAM,MAAM,GAAG,cAAc,CAAC,YAAY,EAAE,EAAE,CAAC,CAAC;AAChD,MAAM,cAAc,GAAI,qBAAqB,CAAC,CAAC,kBAAkB;AAEjE,2FAA2F;AAC3F,SAAgB,aAAa,CAAC,QAAgB;IAC5C,+DAA+D;IAC/D,OAAO,GAAG,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,WAAW,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,QAAQ,EAAE,EAAE,CAAC;AACtE,CAAC;AAHD,sCAGC;AAED,SAAgB,aAAa,CAAC,QAAgB;IAC5C,OAAO,cAAc,CAAC,IAAI,CAAC,QAAQ,CAAC,WAAW,EAAE,CAAC,CAAC;AACrD,CAAC;AAFD,sCAEC;AAED,SAAgB,aAAa,CAAC,QAAgB,EAAE,IAAY,EAAE,IAAY;IACxE,OAAO,IAAI,IAAI,MAAM,CAAC,UAAU,CAAC,QAAQ,EAAE,IAAI,EAAE,IAAI,EAAE,EAAE,EAAE,QAAQ,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;AACvF,CAAC;AAFD,sCAEC;AAAA,CAAC;AAEF,SAAgB,cAAc,CAAC,QAAgB;IAC7C,IAAI,IAAI,GAAG,MAAM,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;IAClD,IAAI,IAAI,GAAG,MAAM,CAAC,UAAU,CAAC,QAAQ,EAAE,IAAI,EAAE,IAAI,EAAE,EAAE,EAAE,QAAQ,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;IACjF,OAAO,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC;AACxB,CAAC;AAJD,wCAIC;AAED,SAAgB,gBAAgB,CAAC,MAAc;IAC7C,MAAM,QAAQ,GAAG,mBAAQ,CAAC,MAAM,CAAC,CAAC;IAClC,IAAI,CAAC,QAAQ;QAAE,OAAO,IAAI,CAAC;IAE3B,OAAO,kBAAO,CAAC,QAAQ,CAAC,CAAC;AAC3B,CAAC;AALD,4CAKC","sourcesContent":["import * as crypto from \"crypto\";\nimport { getUser, getToken } from './database'\nconst { customAlphabet } = require('nanoid');\nconst nanoid = customAlphabet('0123456789', 36);\nconst USERNAME_REGEX =  /^[A-Za-z0-9]{3,12}$/; //^[a-zA-Z0-9]+$/;\n\n// Muxed account can only accept number, so we need to convert username string to a number.\nexport function usernameForId(username: string): string {\n  //return username.split('').map(c => c.charCodeAt(0)).join('');\n  return `${BigInt(parseInt(username.toLowerCase(), 36)).toString()}`;\n}\n\nexport function validUsername(username: string){\n  return USERNAME_REGEX.test(username.toLowerCase());\n}\n\nexport function validPassword(password: string, hash: string, salt: string): boolean {\n  return hash == crypto.pbkdf2Sync(password, salt, 1000, 64, `sha512`).toString(`hex`);\n};\n\nexport function securePassword(password: string): { salt: string, hash: string } {\n  let salt = crypto.randomBytes(16).toString('hex');\n  let hash = crypto.pbkdf2Sync(password, salt, 1000, 64, `sha512`).toString(`hex`);\n  return { salt, hash };\n}\n\nexport function accountForApiKey(apiKey: string) {\n  const username = getToken(apiKey);\n  if (!username) return null;\n\n  return getUser(username);\n}"]}